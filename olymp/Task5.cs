using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/*
 * Магические кристаллы очень капризны. Их располагают в ряд, и каждый кристалл вырабатывает магическую энергию только в том случае,
 * когда уровень магической перегрузки данного кристалла строго меньше, чем у двух соседних кристаллов - ближайших справа и слева соседей.
 * При этом крайний слева и крайний справа в ряду кристаллы не вырабатывают магической энергии.
 *
 * Итак, маг выложил в ряд кристаллы, которые пронумерованы целыми числами от 1 до n слева направо.
 * У каждого кристалла имеется уровень магической перегрузки — положительное целое число. Все уровни кристаллов в ряду различны.
 *
 * Ваша задача переставить кристаллы в ряду так, чтобы как можно большее число кристаллов начали вырабатывать магическую энергию,
 * и определить, как для этого нужно переставить кристаллы.
 *
 * Входные данные
 * В первой строке находится единственное целое число n (1≤n≤105) — число кристаллов.
 *
 * Во второй строке находится n различных целых чисел a1,a2,…,an (1≤ai≤109) — уровни магической перегрузки каждого кристалла.
 *
 * Выходные данные
 * В первой строке выведите наибольшее возможное число кристаллов, которые смогут вырабатывать магическую энергию при некоторой перестановке.
 *
 * Во второй строке выведите уровни магической перегрузки в том порядке, в котором их нужно расположить в ряду. Если возможных ответов несколько, выведите любой из них.
 */

namespace olymp
{
    public static class Task5
    {
        public static void Run()
        {
            int n = int.Parse(Console.ReadLine());
            List<int> list = Console.ReadLine().Split(" ").Select(x => int.Parse(x)).OrderByDescending(x => x).ToList();
            List<int> ans = new List<int>();
            int countWorks = 0;
            int i = 1;
            ans.Add(list[0]);
            while (ans.Count != list.Count)
            {
                if (i + 1 < list.Count)
                {
                    ans.Add(list[i + 1]);
                    countWorks++;
                }
                if (i < list.Count)
                    ans.Add(list[i]);
                i += 2;
            }
            Console.WriteLine(countWorks);
            Console.WriteLine(string.Join(" ", ans));
        }
    }
}
